// Autogenerated from Pigeon (v9.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

enum ResultState: Int {
  case success = 0
  case error = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct ResponseResult {
  var state: ResultState
  var message: String

  static func fromList(_ list: [Any]) -> ResponseResult? {
    let state = ResultState(rawValue: list[0] as! Int)!
    let message = list[1] as! String

    return ResponseResult(
      state: state,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      state.rawValue,
      message,
    ]
  }
}

private class ExternalLinkAccountApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ResponseResult.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ExternalLinkAccountApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ResponseResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ExternalLinkAccountApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ExternalLinkAccountApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ExternalLinkAccountApiCodecWriter(data: data)
  }
}

class ExternalLinkAccountApiCodec: FlutterStandardMessageCodec {
  static let shared = ExternalLinkAccountApiCodec(readerWriter: ExternalLinkAccountApiCodecReaderWriter())
}

/// Enables qualifying apps to link to an external website for account creation or management
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ExternalLinkAccountApi {
  /// Presents a continuation sheet that enables people to choose whether to open your app’s link to an external website for account creation or management.
  func open(completion: @escaping (Result<ResponseResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ExternalLinkAccountApiSetup {
  /// The codec used by ExternalLinkAccountApi.
  static var codec: FlutterStandardMessageCodec { ExternalLinkAccountApiCodec.shared }
  /// Sets up an instance of `ExternalLinkAccountApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ExternalLinkAccountApi?) {
    /// Presents a continuation sheet that enables people to choose whether to open your app’s link to an external website for account creation or management.
    let openChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ExternalLinkAccountApi.open", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openChannel.setMessageHandler { _, reply in
        api.open() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openChannel.setMessageHandler(nil)
    }
  }
}
